<?php
/**
 * @file
 * Dennis Layout module code.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function dennis_layout_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Creates Sidebar deactivation field.
 */
function dennis_layout_create_sidebar_deactivation_field($bundles) {
  if (!is_array($bundles)) {
    $bundles = array($bundles);
  }

  if (!field_info_field('field_sidebar_off')) {
    include_once 'dennis_layout.field_base.inc';
    $field_bases = dennis_layout_field_default_field_bases();
    foreach ($field_bases as $key => $value) {
      if (!empty($key) && !db_table_exists('field_data_' . $key)) {
        field_create_field($field_bases[$key]);
      }
    }

    foreach ($bundles as $bundle) {
      if (!field_info_instance('node', 'field_sidebar_off', $bundle)) {
        // Create the field instance on the bundle.
        $instance = [
          'field_name' => 'field_sidebar_off',
          'entity_type' => 'node',
          'label' => 'Deactivate Sidebar',
          'bundle' => $bundle,
          'widget' => [
            'type' => 'options_onoff',
            'settings' => ['display_label' => 1],
            'weight' => 55,
          ],
          'description' => 'If this field is checked, the sidebar deactivation Context hides the sidebar on a node level.',
          'display' => [
            'default' => [
              'label' => 'above',
              'settings' => [],
              'type' => 'hidden',
              'weight' => 20,
            ],
          ],
        ];

        if (field_create_instance($instance)) {
          drupal_set_message(t('Deactivate Sidebar field added for %type.', ['%type' => $bundle]));
        }
        else {
          drupal_set_message(t('Deactivate Sidebar field creation for %type failed!', ['%type' => $bundle]));
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function dennis_layout_permission() {
  return array(
    'deactivate sidebar' => array(
      'title' => t('Deactivate Sidebar'),
      'description' => t('Access the Sidebar Deactivation field on nodes.'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dennis_layout_form_node_form_alter(&$form, $form_state, $form_id) {
  // Hide the sidebar deactivation field if user has no permission.
  if (!user_access('deactivate sidebar') && !empty($form['field_sidebar_off'])) {
    $form['field_sidebar_off']['#access'] = FALSE;
  }
}

/**
 * Implements hook_context_plugins().
 */
function dennis_layout_context_plugins() {
  $plugins = array();
  $plugins['sidebar_off'] = array(
    'handler' => array(
      'path'   => drupal_get_path('module', 'dennis_layout') . '/plugins',
      'file'   => 'context_condition_sidebar_off.inc',
      'class'  => 'context_condition_sidebar_off',
      'parent' => 'context_condition',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function dennis_layout_context_registry() {
  $registry['conditions'] = array(
    'sidebar_off' => array(
      'title'       => t('Sidebar deactivation field checked'),
      'description' => t('Sidebar deactivation based on node level field value'),
      'plugin'      => 'sidebar_off',
    ),
  );

  return $registry;
}

/**
 * Implements hook_node_view().
 */
function dennis_layout_node_view($node, $view_mode, $langcode) {
  if ($plugin = context_get_plugin('condition', 'sidebar_off')) {
    $plugin->execute($node);
  }
}

/**
 * Determine whether the sidebar deactivation field is checked or not.
 *
 * @param object $node
 * The node object.
 */
function dennis_layout_sidebar_off($node) {
  $sidebar_off = FALSE;

  // Condition: Sidebar deactivation field is checked on node.
  if (!empty($node->field_sidebar_off) && $node->field_sidebar_off[LANGUAGE_NONE][0]['value'] == 1) {
    $sidebar_off = TRUE;
  }

  return $sidebar_off;
}

/**
 * @param $context_tag
 * @param $content_types
 *
 * Create sidebar disable context.
 */
function dennis_layout_create_sidebar_off_context($tag, $content_types, $disable_regions) {
  if (context_load('disable_sidebar')) {
    drupal_set_message(t('disable_sidebar context already exists, aborting.'));
  }
  else {
    $context_region_list = array();

    // Go through all themes and find what regions to include in the context.
    foreach (list_themes(TRUE) as $theme_name => $theme_settings) {
      foreach (system_region_list($theme_name) as $region_name => $region_settings) {
        if (in_array($region_name, $disable_regions)) {
          $context_region_list[$theme_name]['disable'][$region_name] = $region_name;
        }
      }
    }

    // Create the context.
    $context = new stdClass();
    $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
    $context->api_version = 3;
    $context->name = 'disable_sidebar';
    $context->description = 'Disable sidebar on node level';
    $context->tag = $tag;
    $context->conditions = array(
      'node' => array(
        'values' => $content_types,
        'options' => array(
          'node_form' => '0',
        ),
      ),
      'sidebar_off' => array(
        'values' => array(
          1 => 1,
        ),
      ),
    );
    $context->reactions = array(
      'region' => $context_region_list,
    );
    $context->condition_mode = 1;

    if (context_save($context)) {
      drupal_set_message(t('disable_sidebar context added successfully.'));
    } else {
      drupal_set_message(t('disable_sidebar context creation failed!'));
    }
  }
}

/**
 * Implements hook_dennis_datalayer_node_options().
 *
 * Provide single_column token to dennis_datalayer module.
 * Cases 29104, 29034.
 */
function dennis_layout_dennis_datalayer_node_options() {
  $node_options_tokens = array();

  if ($node = menu_get_object()) {
    $node_options_tokens['single_column'] = array(
      'value' => 0,
      'label' => 'single column',
    );
    if (!empty($node->field_sidebar_off) && $node->field_sidebar_off[LANGUAGE_NONE][0]['value'] == 1) {
      $node_options_tokens['single_column']['value'] = 1;
    }
  }
  return $node_options_tokens;
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Add an additional "No right column" filter to the content view.
 */
function dennis_layout_views_default_views_alter(&$views) {
  if (isset($views['content_administration'])) {
    $handler =& $views['content_administration']->display['default']->handler;
    /* Filter criterion: Content: Deactivate Sidebar (field_sidebar_off) */
    $handler->display->display_options['filters']['field_sidebar_off_value']['id'] = 'field_sidebar_off_value';
    $handler->display->display_options['filters']['field_sidebar_off_value']['table'] = 'field_data_field_sidebar_off';
    $handler->display->display_options['filters']['field_sidebar_off_value']['field'] = 'field_sidebar_off_value';
    $handler->display->display_options['filters']['field_sidebar_off_value']['value'] = array(
      0 => '0',
      1 => '1',
    );
    $handler->display->display_options['filters']['field_sidebar_off_value']['exposed'] = TRUE;
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['operator_id'] = 'field_sidebar_off_value_op';
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['label'] = 'No right column';
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['operator'] = 'field_sidebar_off_value_op';
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['identifier'] = 'field_sidebar_off_value';
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['remember'] = TRUE;
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['remember_roles'] = array(
      2 => '2',
      1 => '1',
      3 => '3',
      5 => '5',
      6 => '6',
      4 => '4',
      7 => '7',
    );
    $handler->display->display_options['filters']['field_sidebar_off_value']['expose']['reduce'] = TRUE;
    $handler->display->display_options['filters']['field_sidebar_off_value']['group_info']['label'] = 'Deactivate Sidebar (field_sidebar_off)';
    $handler->display->display_options['filters']['field_sidebar_off_value']['group_info']['identifier'] = 'field_sidebar_off_value';
    $handler->display->display_options['filters']['field_sidebar_off_value']['group_info']['remember'] = FALSE;
    $handler->display->display_options['filters']['field_sidebar_off_value']['group_info']['group_items'] = array(
      1 => array(),
      2 => array(),
      3 => array(),
    );
  }
}
